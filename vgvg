package main

import (
	"io"
	"net"
	"net/http"
	"os"
	"fmt"
    "io/ioutil"
    "strconv"
    "strings"
    "time"

)

func hello(w http.ResponseWriter, r *http.Request) {
	io.WriteString(w, "Hello! this site will provide details like IP ADDRESS,CPU PERFORMANCE,HARD DISK SPACE and RAM usage")
}

 func ip(w http.ResponseWriter, r *http.Request) {
          addrs, err := net.InterfaceAddrs()
              if err != nil {
              os.Stderr.WriteString("Oops: " + err.Error() + "\n")
              os.Exit(1)
                            }
         for _, a := range addrs {
           if ipnet, ok := a.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
              if ipnet.IP.To4() != nil {
                 os.Stdout.WriteString(ipnet.IP.String() + "\n")
		 io.WriteString(w, "the IP ADDRESS is")
		 io.WriteString(w,ipnet.IP.String() + "\n")
                                       }
                                 }
                          }
      }

func getCPUSample() (idle, total uint64) {
    contents, err := ioutil.ReadFile("/proc/stat")
    if err != nil {
        return
    }
    lines := strings.Split(string(contents), "\n")
    for _, line := range(lines) {
        fields := strings.Fields(line)
        if fields[0] == "cpu" {
            numFields := len(fields)
            for i := 1; i < numFields; i++ {
                val, err := strconv.ParseUint(fields[i], 10, 64)
                if err != nil {
                    fmt.Println("Error: ", i, fields[i], err)
                }
                total += val // tally up all the numbers to get total ticks
                if i == 4 {  // idle is the 5th field in the cpu line
                    idle = val
                }
            }
            return
        }
    }
    return
}

func cpu(w http.ResponseWriter, r *http.Request) {
    idle0, total0 := getCPUSample()
    time.Sleep(3 * time.Second)
    idle1, total1 := getCPUSample()

    idleTicks := float64(idle1 - idle0)
    totalTicks := float64(total1 - total0)
    cpuUsage := 100 * (totalTicks - idleTicks) / totalTicks
    fmt.Printf("CPU usage is %f%% [busy: %f, total: %f]\n", cpuUsage, totalTicks-idleTicks, totalTicks)
}





func main() {
	http.HandleFunc("/about", hello)
	http.HandleFunc("/ip", ip)
	http.HandleFunc("/cpu", cpu)
	http.ListenAndServe(":8000",nil)
}

